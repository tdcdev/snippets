snippet def "#define ..."
#define ${1}
endsnippet

snippet #if "#if ..."
#if ${1:SYMBOL}

${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}

#endif
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}

${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}

#endif
endsnippet

snippet once "include header guard"
#ifndef ${1:`!p
import re
name = re.sub(r'([A-Z])', '_\g<1>', snip.fn)
name = re.sub(r'[^A-Za-z0-9]+','_', name)
name = re.sub(r'^([a-z0-9])', '_\g<1>', name).upper()
snip.rv = '%s_' % name
`}
#define $1



${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}



#endif
endsnippet

snippet inc "#include '...'"
#include "${0:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet Inc "#include <...>"
#include <${0:`!p snip.rv = snip.basename + '.h'`}>
endsnippet

snippet main "main(int argc, char** argv)"
int main(int argc, char** argv)
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}

	return 0;
}
endsnippet

snippet for "for loop"
for (${1:i} = 0; $1 < ${2:count}; ${3:$1++})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet fori "for int loop"
for (${1:int} ${2:i} = 0; $2 < ${3:count}; ${4:$2++})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet wh "while loop"
while (${1:/* condition */})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet do "do while loop"
do {

	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}

} while(${1:/* condition */});
endsnippet

snippet if "if statement"
if (${1:/* condition */})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet el "else statement"
else
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet eli "else if statement"
else if (${1:/* condition */})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet ife "if else statement"
if (${1:/* condition */})
{
	${2:/* code */}
}
else
{
	${0:/* code */}
}
endsnippet

snippet switch "switch statement"
switch (${1:/* variable */})
{
	case ${2:/* variable case */}:
		${3:/* code */}
		${4:break;}

	default:
		${0:/* code */}
}
endsnippet

snippet switchndef "switch statement without default"
switch (${1:/* variable */})
{
	case ${2:/* variable case */}:
		${3:/* code */}
		${0:break;}
}
endsnippet

snippet case "case statement"
case ${1:/* variable case */}:
	${2:/* code */}
	${0:break;}
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3:/* args */})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3:/* args */});
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name").lower() + "_t"`}
{

	${0:/* data */}

};
endsnippet

snippet printf "printf"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet fprintf "fprintf"
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet
